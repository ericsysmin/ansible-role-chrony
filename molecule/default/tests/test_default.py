import os

import pytest
import testinfra.utils.ansible_runner

testinfra_hosts = testinfra.utils.ansible_runner.AnsibleRunner(
    os.environ['MOLECULE_INVENTORY_FILE']).get_hosts('all')


@pytest.fixture(scope="module")
def facts(host):
    os_family = host.ansible('setup')['ansible_facts']['ansible_os_family']

    chrony_config_location = '/etc/chrony/chrony.conf'
    chrony_config_driftfile = '/var/lib/chrony/chrony.drift'
    chrony_config_keyfile = '/etc/chrony/chrony.keys'
    chrony_config_logdir = '/var/log/chrony'

    if os_family == 'RedHat':
        chrony_config_location = '/etc/chrony.conf'
        chrony_config_driftfile = '/var/lib/chrony/drift'
        chrony_config_keyfile = '/etc/chrony.keys'

    return {
        'chrony_config_location': chrony_config_location,
        'chrony_config_driftfile': chrony_config_driftfile,
        'chrony_config_keyfile': chrony_config_keyfile,
        'chrony_config_logdir': chrony_config_logdir,
    }


def test_chrony_file(host, facts):
    f = host.file(facts['chrony_config_location'])

    assert f.exists
    assert f.user == 'root'
    assert f.group == 'root'

    x = """
# Ansible managed: Do NOT edit this file manually!

# List of NTP servers to use.
server 0.pool.ntp.org iburst
server 1.pool.ntp.org iburst
server 2.pool.ntp.org iburst
server 3.pool.ntp.org iburst

# This directive specify the location of the file containing ID/key pairs for
# NTP authentication.
keyfile {chrony_config_keyfile}

# This directive specify the file into which chronyd will store the rate
# information.
driftfile {chrony_config_driftfile}

# Uncomment the following line to turn logging on.
#log tracking measurements statistics

# Log files location.
logdir {chrony_config_logdir}

# Stop bad estimates upsetting machine clock.
maxupdateskew 100.0

# This directive enables kernel synchronisation (every 11 minutes) of the
# real-time clock. Note that it can't be used along with the 'rtcfile' directive.
rtcsync

# Step the system clock instead of slewing it if the adjustment is larger than
# one second, but only in the first three clock updates.
makestep 1 3
"""  # noqa
    x = x.format(**facts)
    x = x.lstrip()

    assert x == f.content_string
